// mixins.scss
// =============================================================================


// Clearfix
// @see http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix {
  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}

// Sizing
// -----------------------------------------------------------------------------
@mixin size($width, $height) {
  width: $width;
  height: $height;
}

@mixin square($size) {
  @include size($size, $size);
}

// TODO: add scrollableX & scrollableY
@mixin scrollable() {
  overflow: auto;
  -webkit-overflow-scrolling: touch;
}

// Text
// -----------------------------------------------------------------------------

// Text overflow
// Requires inline-block or block for proper styling
@mixin text-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Line clamp
// http://dropshado.ws/post/1015351370/webkit-line-clamp
@mixin line-clamp($lines: 2, $line-height: 1.3em) {
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines; // number of lines to show
  overflow: hidden;
  line-height: $line-height;
  max-height: $line-height * $lines;
}

// Form
// -----------------------------------------------------------------------------

// Disable OS-level styles
@mixin no-appearance {
  -webkit-appearance: none;
  -moz-appearance: none;
}

// Shape
// -----------------------------------------------------------------------------
/// CSS Triangle
/// Creates a CSS triangle, which can be used for dropdown arrows, popup tails, and more. Use this mixin inside a `&::before` or `&::after` selector, to attach the triangle to an existing element.
///
/// @param {number} $triangle-size - Width of the triangle.
/// @param {color} $triangle-color - Color of the triangle.
/// @param {keyword} $triangle-direction - Direction the triangle points. Can be `top`, `right`, `bottom`, or `left`.
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border: inset $triangle-size;
  @if ($triangle-direction == top) {
    border-color: $triangle-color transparent transparent transparent;
    border-top-style: solid;
  }
  @if ($triangle-direction == bottom) {
    border-color: transparent transparent $triangle-color transparent;
    border-bottom-style: solid;
  }
  @if ($triangle-direction == left) {
    border-color: transparent transparent transparent $triangle-color;
    border-left-style: solid;
  }
  @if ($triangle-direction == right) {
    border-color: transparent $triangle-color transparent transparent;
    border-right-style: solid;
  }
}


// Retina borders
// @see https://gist.github.com/w0rm/c0dd4b7aed71acc03900
// @see http://dieulot.net/css-retina-hairline
// -----------------------------------------------------------------------------
@mixin retina-border-top($color: #c4c4c4) {
  position: relative;

  &::before {
    content: "";
    top: 0;
    left: 0;
    position: absolute;
    display: block;
    @include size(100%, 1px);
    background-color: $color;
  }

  // simulate a 1px border on retina screens
  @media (-webkit-min-device-pixel-ratio: 2) {
    &::before {
      transform: scaleY(0.5);
      transform-origin: 50% 0;
    }
  }
}

@mixin retina-border-bottom($color: #c4c4c4) {
  position: relative;

  &::after {
    content: "";
    bottom: 0;
    left: 0;
    position: absolute;
    display: block;
    @include size(100%, 1px);
    background-color: $color;
    backface-visibility: hidden;
  }

  // simulate a 1px border on retina screens
  @media (-webkit-min-device-pixel-ratio: 2) {
    &::after {
      transform: scaleY(0.5);
      transform-origin: 50% 100%;
    }
  }
}

// Animation
// -----------------------------------------------------------------------------

@mixin force-hardware-acceleration {
  transform: translateZ(0);
  backface-visibility: hidden;
  perspective: 1000;
}

%force-hardware-acceleration {
  @include force-hardware-acceleration();
}

@mixin height($height){
  height: $height;
  line-height: $height;
}
